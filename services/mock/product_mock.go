// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mock_services is a generated GoMock package.
package mock

import (
	services "github.com/gipsh/basic-contract-interaction/services"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProductService is a mock of ProductService interface
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// GetProducts mocks base method
func (m *MockProductService) GetProducts() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts
func (mr *MockProductServiceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductService)(nil).GetProducts))
}

// GetProductById mocks base method
func (m *MockProductService) GetProductById(productId int64) (services.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", productId)
	ret0, _ := ret[0].(services.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById
func (mr *MockProductServiceMockRecorder) GetProductById(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductService)(nil).GetProductById), productId)
}

// GetProductByName mocks base method
func (m *MockProductService) GetProductByName(name string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByName", name)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByName indicates an expected call of GetProductByName
func (mr *MockProductServiceMockRecorder) GetProductByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByName", reflect.TypeOf((*MockProductService)(nil).GetProductByName), name)
}

// CreateProduct mocks base method
func (m *MockProductService) CreateProduct(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct
func (mr *MockProductServiceMockRecorder) CreateProduct(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductService)(nil).CreateProduct), name)
}

// DelegateProduct mocks base method
func (m *MockProductService) DelegateProduct(productId int64, newOwner string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateProduct", productId, newOwner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelegateProduct indicates an expected call of DelegateProduct
func (mr *MockProductServiceMockRecorder) DelegateProduct(productId, newOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateProduct", reflect.TypeOf((*MockProductService)(nil).DelegateProduct), productId, newOwner)
}

// AcceptProduct mocks base method
func (m *MockProductService) AcceptProduct(productId int64, newOwner string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptProduct", productId, newOwner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptProduct indicates an expected call of AcceptProduct
func (mr *MockProductServiceMockRecorder) AcceptProduct(productId, newOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptProduct", reflect.TypeOf((*MockProductService)(nil).AcceptProduct), productId, newOwner)
}

// GetDelegatedProducts mocks base method
func (m *MockProductService) GetDelegatedProducts(owner string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedProducts", owner)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedProducts indicates an expected call of GetDelegatedProducts
func (mr *MockProductServiceMockRecorder) GetDelegatedProducts(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedProducts", reflect.TypeOf((*MockProductService)(nil).GetDelegatedProducts), owner)
}
